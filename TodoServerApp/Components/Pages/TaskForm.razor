@page "/tasks/add"
@page "/tasks/{Id:int}"

@inject IDataService data
@inject NavigationManager navigate

@if (TaskItem != null)
{
    <EditForm Model="TaskItem" FormName="TaskForm" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <h2>Новая задача</h2>
        <InputNumber @bind-Value="TaskItem.Id" hidden />
        <div class="form-group d-fliex justify-content-between m-2">
            <label class="col-form-label col-3">Заголовок</label>
            <InputText @bind-Value="TaskItem.Title"class="form-control"/>
            <ValidationMessage For="() => TaskItem.Title"/>
        </div>
        <div class="form-group d-fliex justify-content-between m-2">
            <label class="col-form-label col-3">Описание</label>
            <InputText @bind-Value="TaskItem.Description"class="form-control"/>
            <ValidationMessage For="() => TaskItem.Description"/>
        </div>
        <div class="form-group d-fliex justify-content-between m-2">
            <label class="col-form-label col-3">Дата окончания</label>
            <InputDate @bind-Value="TaskItem.FinishDate"class="form-control"/>
            <ValidationMessage For="() => TaskItem.FinishDate"/>
        </div>
        <div class="bnt-group">
            <button class="bnt bnt-primary m-2" type="submit">Сохранить</button>
            <a class="btn btn-primary m-2" href="/">Отмена</a>
        </div>
    </EditForm>
}
@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    TaskItem? TaskItem { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (TaskItem == null)
        {
            TaskItem = new();
            if (Id != 0)
            {
                var scr = await data.GetTaskAsync(Id);
                TaskItem.Id = scr.Id;
                TaskItem.Title = scr.Title;
                TaskItem.Description = scr.Description;
                TaskItem.FinishDate = scr.FinishDate;
            }
        }
    }
    async Task ValidSubmit()
    {
        await data.SaveAsync(TaskItem!);
        navigate.NavigateTo("/");
    }

}